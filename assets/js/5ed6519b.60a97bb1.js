"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[57],{51235:t=>{t.exports=JSON.parse('{"functions":[{"name":"GetQueue","desc":"Returns the internal queue BridgeNet uses. Not intended for production purposes- use this to debug potential issues with the module, or your own code.","params":[],"returns":[{"desc":"","lua_type":"SendQueue, ReceiveQueue"}],"function_type":"static","source":{"line":26,"path":"src/init.lua"}},{"name":"Identifiers","desc":"Returns a dictionary of identifiers based off of the passed array of strings.\\n```lua\\nlocal Stuff = BridgeNet.Identifiers({\\n\\t\\"Foo\\",\\n\\t\\"Bar\\",\\n})\\n\\nprint(Stuff.Foo)\\nprint(Stuff.Bar)\\n```","params":[],"returns":[{"desc":"","lua_type":"{ [string]: string }"}],"function_type":"static","source":{"line":44,"path":"src/init.lua"}},{"name":"CreateBridgeTree","desc":"This function creates a series of Bridges with a preset configuration. This function supports namespaces- it takes either a BridgeNet.Bridge() function, or a dictionary.\\n```lua\\nlocal MyBridgeTree = BridgeNet.CreateBridgeTree({\\n\\tBridgeNameHere = BridgeNet.Bridge()\\n\\tNamespaceHere = {\\n\\t\\tBridgeHere = BridgeNet.Bridge({\\n\\t\\t\\tReplicationRate = 20\\n\\t\\t})\\n\\t}\\n})\\n```\\nThis allows you to create your Bridge objects in one centralized place, as it is runnable on both the client and server. This means that one module can contain all of your\\nBridge objects- which makes it much easier to access. Example usage:\\n```lua\\n-- shared/Bridges.luau\\nlocal MyBridgeTree = BridgeNet.CreateBridgeTree({\\n\\tPrintOnServer = BridgeNet.Bridge()\\n})\\n\\nreturn MyBridgeTree\\n\\n-- client\\nlocal Bridges = require(path.to.Bridges)\\n\\nBridges.PrintOnServer:Fire(\\"Hello, world!\\")\\n\\n-- server\\nlocal Bridges = require(path.to.Bridges)\\n\\nBridges.PrintOnServer:Connect(function(player, text)\\n\\tprint(\\"Player \\" .. player.Name .. \\" has said \\" .. text) -- prints \\"Player SomeUsername has said Hello, world!\\nend)\\n```","params":[{"name":"BridgeTree","desc":"","lua_type":"{ [string]: thisType | BridgeConfig }"}],"returns":[{"desc":"","lua_type":"{ [string]: thisType | Bridge }"}],"function_type":"static","source":{"line":86,"path":"src/init.lua"}},{"name":"Bridge","desc":"This function is only intended for usage within BridgeNet.CreateBridgeTree(). You are not supposed to use this anywhere else.\\nThis function lets you assign middleware, a replication rate, and in the future certain things like logging and typechecking.\\n\\n```lua\\n\\tlocal MyBridgeTree = BridgeNet.CreateBridgeTree({\\n\\t\\tPrint = BridgeNet.Bridge({\\n\\t\\t\\tReplicationRate = 20, -- twenty times per second\\n\\t\\t\\tServer = {\\n\\t\\t\\t\\tOutboundMiddleware = {\\n\\t\\t\\t\\t\\tfunction(...)\\n\\t\\t\\t\\t\\t\\tprint(\\"Telling the client to print...\\")\\n\\t\\t\\t\\t\\t\\treturn ...\\n\\t\\t\\t\\t\\tend,\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tInboundMiddleware = {\\n\\t\\t\\t\\t\\tfunction(plr, ...)\\n\\t\\t\\t\\t\\t\\tprint(\\"Player \\" .. plr.Name .. \\" has fired PrintOnServer\\")\\n\\t\\t\\t\\t\\t\\treturn ...\\n\\t\\t\\t\\t\\tend,\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t\\tClient = {\\n\\t\\t\\t\\tOutboundMiddleware = {\\n\\t\\t\\t\\t\\tfunction(...)\\n\\t\\t\\t\\t\\t\\tprint(\\"Telling the server to print...\\")\\n\\t\\t\\t\\t\\t\\treturn ...\\n\\t\\t\\t\\t\\tend,\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tInboundMiddleware = {\\n\\t\\t\\t\\t\\tfunction(plr, ...)\\n\\t\\t\\t\\t\\t\\tprint(\\"The server has told us to print\\")\\n\\t\\t\\t\\t\\t\\treturn ...\\n\\t\\t\\t\\t\\tend,\\n\\t\\t\\t\\t},\\n\\t\\t\\t}\\n\\t\\t})\\n\\t})\\n```","params":[],"returns":[{"desc":"","lua_type":"BridgeConfig"}],"function_type":"static","source":{"line":132,"path":"src/init.lua"}},{"name":"CreateBridge","desc":"Creates a ServerBridge or a ClientBridge depending on if it\'s the server or client calling. If a Bridge of that name already exists, it\'ll return that Bridge object.\\nThis can be used to fetch bridges, but .WaitForBridge is recommended.\\n\\n```lua\\nlocal Bridge = BridgeNet.CreateBridge(\\"Remote\\")\\n```","params":[{"name":"remoteName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ServerBridge | ClientBridge"}],"function_type":"static","source":{"line":147,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"BridgeNet","desc":"The interface for the library.","source":{"line":17,"path":"src/init.lua"}}')}}]);