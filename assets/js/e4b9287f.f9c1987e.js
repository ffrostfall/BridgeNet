"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[797],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(r),g=a,m=u["".concat(l,".").concat(g)]||u[g]||p[g]||i;return r?n.createElement(m,s(s({ref:t},d),{},{components:r})):n.createElement(m,s({ref:t},d))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},31875:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const i={sidebar_position:3},s="Getting Started",o={unversionedId:"Getting Started",id:"Getting Started",title:"Getting Started",description:'BridgeNet uses objects known as "bridges". These objects are the equivalant of RemoteEvents in normal Roblox. They are created as such:',source:"@site/docs/Getting Started.md",sourceDirName:".",slug:"/Getting Started",permalink:"/BridgeNet/docs/Getting Started",draft:!1,editUrl:"https://github.com/ffrostflame/bridgenet/edit/main/docs/Getting Started.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/BridgeNet/docs/Installation"},next:{title:"Server-Client Example",permalink:"/BridgeNet/docs/Server-Client Example"}},l={},c=[{value:"Using the identifier system",id:"using-the-identifier-system",level:2}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,'BridgeNet uses objects known as "bridges". These objects are the equivalant of RemoteEvents in normal Roblox. They are created as such:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.lua"',title:'"init.lua"'},'local Bridge = BridgeNet.CreateBridge("RemoteNameHere")\nBridge:FireAll("Firing all players")\n')),(0,a.kt)("p",null,"All the optimizations are handled for you! These are packaged, sent out with a compressed string ID, and received on the client."),(0,a.kt)("h2",{id:"using-the-identifier-system"},"Using the identifier system"),(0,a.kt)("p",null,"A common pattern in Roblox are constant strings that are sent over the client/server boundary. The identifier strings are 1-2 character strings\nthat represent longer strings- which you define. This saves on bandwith because sending shorter strings instead of longer strings saves on data.\nThese are typically\nstatic, and can depict things like action requests, item names, all of that. This library provides an easy system to optimize\nthese: the 3 functions ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateIdentifier"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"WhatIsThis"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"DestroyIdentifier"),". They are used as such:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="spellHandler.client.lua"',title:'"spellHandler.client.lua"'},'local SpellCaster = BridgeNet.CreateBridge("SpellCaster")\n\nlocal Fireball = BridgeNet.CreateIdentifier("Fireball")\n\nSomeUserInputSignalHere:Connect(function()\n    SpellCaster:Fire(Fireball) -- Fires a 1 or 2 character string, much smaller than an 8-character string.\nend)\n')))}p.isMDXComponent=!0}}]);