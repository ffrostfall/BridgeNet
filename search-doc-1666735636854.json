[{"title":"BridgeNet","type":0,"sectionRef":"#","url":"api/BridgeNet","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#functions","content":" "},{"title":"GetQueue​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#GetQueue","content":"&lt;/&gt; BridgeNet.GetQueue() → SendQueue,ReceiveQueue Returns the internal queue BridgeNet uses. Not intended for production purposes- use this to debug potential issues with the module, or your own code.  "},{"title":"Identifiers​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#Identifiers","content":"&lt;/&gt; BridgeNet.Identifiers() → {[string]: string} Returns a dictionary of identifiers based off of the passed array of strings. local Stuff = BridgeNet.Identifiers({ &quot;Foo&quot;, &quot;Bar&quot;, }) print(Stuff.Foo) print(Stuff.Bar)   "},{"title":"CreateBridgeTree​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#CreateBridgeTree","content":"&lt;/&gt; BridgeNet.CreateBridgeTree(BridgeTree: {[string]: thisType | BridgeConfig}) → {[string]: thisType | Bridge} This function creates a series of Bridges with a preset configuration. This function supports namespaces- it takes either a BridgeNet.Bridge() function, or a dictionary. local MyBridgeTree = BridgeNet.CreateBridgeTree({ BridgeNameHere = BridgeNet.Bridge() NamespaceHere = { BridgeHere = BridgeNet.Bridge({ ReplicationRate = 20 }) } }) This allows you to create your Bridge objects in one centralized place, as it is runnable on both the client and server. This means that one module can contain all of your Bridge objects- which makes it much easier to access. Example usage: -- shared/Bridges.luau local MyBridgeTree = BridgeNet.CreateBridgeTree({ PrintOnServer = BridgeNet.Bridge() }) return MyBridgeTree -- client local Bridges = require(path.to.Bridges) Bridges.PrintOnServer:Fire(&quot;Hello, world!&quot;) -- server local Bridges = require(path.to.Bridges) Bridges.PrintOnServer:Connect(function(player, text) print(&quot;Player &quot; .. player.Name .. &quot; has said &quot; .. text) -- prints &quot;Player SomeUsername has said Hello, world! end)   "},{"title":"Bridge​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#Bridge","content":"&lt;/&gt; BridgeNet.Bridge() → BridgeConfig This function is only intended for usage within BridgeNet.CreateBridgeTree(). You are not supposed to use this anywhere else. This function lets you assign middleware, a replication rate, and in the future certain things like logging and typechecking. local MyBridgeTree = BridgeNet.CreateBridgeTree({ Print = BridgeNet.Bridge({ ReplicationRate = 20, -- twenty times per second Server = { OutboundMiddleware = { function(...) print(&quot;Telling the client to print...&quot;) return ... end, }, InboundMiddleware = { function(plr, ...) print(&quot;Player &quot; .. plr.Name .. &quot; has fired PrintOnServer&quot;) return ... end, }, }, Client = { OutboundMiddleware = { function(...) print(&quot;Telling the server to print...&quot;) return ... end, }, InboundMiddleware = { function(plr, ...) print(&quot;The server has told us to print&quot;) return ... end, }, } }) })   "},{"title":"CreateBridge​","type":1,"pageTitle":"BridgeNet","url":"api/BridgeNet#CreateBridge","content":"&lt;/&gt; BridgeNet.CreateBridge(remoteName: string) → ServerBridge | ClientBridge Creates a ServerBridge or a ClientBridge depending on if it's the server or client calling. If a Bridge of that name already exists, it'll return that Bridge object. This can be used to fetch bridges, but .WaitForBridge is recommended. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;)  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/Getting Started","content":"","keywords":""},{"title":"Using the identifier system​","type":1,"pageTitle":"Getting Started","url":"docs/Getting Started#using-the-identifier-system","content":"A common pattern in Roblox are constant strings that are sent over the client/server boundary. The identifier strings are 1-2 character strings that represent longer strings- which you define. This saves on bandwith because sending shorter strings instead of longer strings saves on data. These are typically static, and can depict things like action requests, item names, all of that. This library provides an easy system to optimize these: the 3 functions CreateIdentifier, WhatIsThis, and DestroyIdentifier. They are used as such: spellHandler.client.lua local SpellCaster = BridgeNet.CreateBridge(&quot;SpellCaster&quot;) local Fireball = BridgeNet.CreateIdentifier(&quot;Fireball&quot;) SomeUserInputSignalHere:Connect(function() SpellCaster:Fire(Fireball) -- Fires a 1 or 2 character string, much smaller than an 8-character string. end)  "},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/Installation","content":"","keywords":""},{"title":"With Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#with-wally","content":"Install WallyPut BridgeNet in the wally.toml file under [dependencies] wally.toml [dependencies] BridgeNet = ffrostflame/bridgenet@0.1.0  Run wally install "},{"title":"Without Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#without-wally","content":"Get the .rbxm file from the latest release.Sync manually or drop into studio manually "},{"title":"Client-Server Example","type":0,"sectionRef":"#","url":"docs/Client-Server Example","content":"","keywords":""},{"title":"Server​","type":1,"pageTitle":"Client-Server Example","url":"docs/Client-Server Example#server","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) Remote:Connect(function(plr, stringA, stringB) print(stringA .. stringB) -- Prints &quot;Hello, server!&quot; end)  "},{"title":"Client​","type":1,"pageTitle":"Client-Server Example","url":"docs/Client-Server Example#client","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) while true do Remote:Fire(&quot;Hello, &quot;, &quot;server!&quot;) task.wait(1) end  "},{"title":"ServerBridge","type":0,"sectionRef":"#","url":"api/ServerBridge","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#functions","content":" "},{"title":"FireTo​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireTo","content":"&lt;/&gt; ServerBridge:FireTo( plr: Player , ...: ...any ) → nil Sends data to a specific player. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireTo(Players.Someone, &quot;Hello&quot;, &quot;World!&quot;)   "},{"title":"OnInvoke​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#OnInvoke","content":"&lt;/&gt; ServerBridge:OnInvoke(callback: (...any) → nil) → Promise Set the handler for when the server is invoked. By default, this is nil. The client will hang forever as of writing this right now. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) local data = Bridge:OnInvoke(function(data) if data == &quot;whats 2+2?&quot; then return &quot;4&quot; end end)   "},{"title":"FireToAllExcept​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireToAllExcept","content":"&lt;/&gt; ServerBridge:FireToAllExcept( blacklistedPlrs: Player | {Player }, ...: ...any ) → nil Sends data to every player except for one. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireToAllExcept(Players.Someone, &quot;Hello&quot;, &quot;World!&quot;) Bridge:FireToAllExcept({Players.A, Players.B}, &quot;Not to A or B, but to C.&quot;)   "},{"title":"FireAllInRangeExcept​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAllInRangeExcept","content":"&lt;/&gt; ServerBridge:FireAllInRangeExcept( blacklistedPlrs: Player | {Player }, point: Vector3 , range: number, ...: ...any ) → {Player } Sends data to every single player within the range except certain blacklisted players. Returns the players affected, for usage later. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) local PlayersSent = Bridge:FireToAllInRangeExcept( Players.Someone, Vector3.new(50, 50, 50), 10, &quot;Hello&quot;, &quot;World!&quot; ) task.wait(5) Bridge:FireToMultiple(PlayersSent, &quot;Time for an update!&quot;)   "},{"title":"FireAllInRange​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAllInRange","content":"&lt;/&gt; ServerBridge:FireAllInRange( point: Vector3 , range: number, ...: ...any ) → {Player } Sends data to every single player within the range. Returns the players affected, for usage later. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) local PlayersSent = Bridge:FireAllInRange( Vector3.new(50, 50, 50), 10, &quot;Hello&quot;, &quot;World!&quot; ) task.wait(5) Bridge:FireToMultiple(PlayersSent, &quot;Time for an update!&quot;)   "},{"title":"FireAll​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireAll","content":"&lt;/&gt; ServerBridge:FireAll(...: ...any) → nil Sends data to every single player, with no exceptions. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireAll(&quot;Hello, world!&quot;)   "},{"title":"FireToMultiple​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#FireToMultiple","content":"&lt;/&gt; ServerBridge:FireToMultiple( plrs: {Player }, ...: ...any ) → nil Sends data to multiple players. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:FireToMultiple({Players.A, Players.B}, &quot;Hi!&quot;, &quot;Hello.&quot;)   "},{"title":"SetInboundMiddleware​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#SetInboundMiddleware","content":"&lt;/&gt; ServerBridge:SetInboundMiddleware(middlewareTable: {(...any) → nil}) → nil Sets the Bridge's inbound middleware functions. Any function which returns nil will drop the remote request completely. Overrides existing middleware. Allows you to change arguments or drop remote calls. A more comprehensive guide on middleware will be coming soon. Object:SetInboundMiddleware({ function(plr, ...) -- Called first return ... end, function(plr, ...) -- Called second print(&quot;1&quot;) return ... end, function(plr, ...) -- Called third print(&quot;2&quot;) return ... end, })   "},{"title":"SetOutboundMiddleware​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#SetOutboundMiddleware","content":"&lt;/&gt; ServerBridge:SetOutboundMiddleware(middlewareTable: {(...any) → nil}) → nil Sets the Bridge's outbound middleware functions. Any function which returns nil will drop the sequence completely. Overrides existing middleware. A more comprehensive guide on middleware will be coming soon. Object:SetOutboundMiddleware({ function(plr, ...) -- Called first return ... end, function(plr, ...) -- Called second print(&quot;1&quot;) return ... end, function(plr, ...) -- Called third print(&quot;2&quot;) return ... end, })   "},{"title":"Once​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#Once","content":"&lt;/&gt; ServerBridge:Once(func: function) → nil Creates a connection, when fired it will disconnect. local Bridge = BridgeNet.CreateBridge(&quot;ConstantlyFiringText&quot;) Bridge:Connect(function(text) print(text) -- Fires multiple times end) Bridge:Once(function(text) print(text) -- Fires once end)   "},{"title":"Connect​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#Connect","content":"&lt;/&gt; ServerBridge:Connect(func: ( plr: Player , ...any ) → nil) → Connection Creates a connection. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:Connect(function(plr, data) print(plr .. &quot; has sent &quot; .. data) end)   "},{"title":"SetReplicationRate​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#SetReplicationRate","content":"&lt;/&gt; ServerBridge:SetReplicationRate(rate: number) → nil Sets the rate of which the Bridge sends and receives data.  "},{"title":"Destroy​","type":1,"pageTitle":"ServerBridge","url":"api/ServerBridge#Destroy","content":"&lt;/&gt; ServerBridge:Destroy() → nil Destroys the identifier, and deletes the object reference. local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:Destroy() Bridge:FireTo(Players.A) -- Errors, the object is deleted.  "},{"title":"BridgeNet","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#features","content":"A multitude of utility functions such as :FireAllInRange(), :FireAllExcept, and :FireAllInRangeExcept.Directly cutting down the amount of data it takes to call a remote eventEasy-to-use, dynamic serialization/deserialization layerDynamic send/receive ratesDynamically creating RemoteEvents while keeping all the above features "},{"title":"Upcoming features (order = priority)​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#upcoming-features-order--priority","content":"Support for rate limitingTypechecking "},{"title":"Prior art​","type":1,"pageTitle":"BridgeNet","url":"docs/intro#prior-art","content":"RbxNetThis is a continuation of my previous networking system NetworkObjectThis devforum post by Tomarty "},{"title":"SerdesLayer","type":0,"sectionRef":"#","url":"api/SerdesLayer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#functions","content":" "},{"title":"CreateIdentifier​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#CreateIdentifier","content":"&lt;/&gt; SerdesLayer.CreateIdentifier(id: string) → string Creates an identifier and associates it with a compressed value. This is shared between the server and the client. If the identifier already exists, it will be returned. BridgeNet.CreateIdentifier(&quot;Something&quot;) print(BridgeNet.WhatIsThis(&quot;Something&quot;, &quot;compressed&quot;))   "},{"title":"FromCompressed​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#FromCompressed","content":"&lt;/&gt; SerdesLayer.FromCompressed(compressed: string) → string Retrieves the full version of a compressed string  "},{"title":"FromIdentifier​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#FromIdentifier","content":"&lt;/&gt; SerdesLayer.FromIdentifier(identifier: string) → string Retrieves the compressed version of an identifier string  "},{"title":"DestroyIdentifier​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#DestroyIdentifier","content":"&lt;/&gt; SerdesLayer.DestroyIdentifier(id: string) → nil Creates an identifier and associates it with a compressed value. This is shared between the server and the client.  "},{"title":"CreateUUID​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#CreateUUID","content":"&lt;/&gt; SerdesLayer.CreateUUID() → string Creates a UUID. print(BridgeNet.CreateUUID()) -- Prints 93179AF839C94B9C975DB1B4A4352D75   "},{"title":"PackUUID​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#PackUUID","content":"&lt;/&gt; SerdesLayer.PackUUID(uuid: string) → string Packs a UUID in hexadecimal form into a string, which can be sent over network as smaller. print(BridgeNet.PackUUID(BridgeNet.CreateUUID())) -- prints something like �#F}ЉF��\\�rY�*   "},{"title":"UnpackUUID​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#UnpackUUID","content":"&lt;/&gt; SerdesLayer.UnpackUUID(uuid: string) → string Takes a packed UUID and convetrs it into hexadecimal/readable form print(BridgeNet.UnpackUUID(somePackedUUID)) -- Prints 93179AF839C94B9C975DB1B4A4352D75   "},{"title":"DictionaryToTable​","type":1,"pageTitle":"SerdesLayer","url":"api/SerdesLayer#DictionaryToTable","content":"&lt;/&gt; SerdesLayer.DictionaryToTable(dict: {[string]: any}) → string Alphabetically sorts a dictionary and turns it into a table. Useful because string keys are typically unnecessary when sending things over the wire. Please note: This doesn't play too nicely with special characters. print(BridgeNet.DictionaryToTable({ alpha = 999, bravo = 1000, charlie = 1001, delta = 1002 })) -- prints {999,1000,1001,1002}  "},{"title":"Server-Client Example","type":0,"sectionRef":"#","url":"docs/Server-Client Example","content":"","keywords":""},{"title":"Server​","type":1,"pageTitle":"Server-Client Example","url":"docs/Server-Client Example#server","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) BridgeNet.Start({}) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) while true do Remote:FireAll(&quot;Hello, &quot;, &quot;world!&quot;) -- Fires to everyone Remote:FireTo(game.Players.Someone, &quot;Hello, &quot;, &quot;someone!&quot;) -- Fires to a specific player task.wait(1) end  "},{"title":"Client​","type":1,"pageTitle":"Server-Client Example","url":"docs/Server-Client Example#client","content":"local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local BridgeNet = require(ReplicatedStorage.Packages.BridgeNet) BridgeNet.Start({}) local Remote = BridgeNet.CreateBridge(&quot;Remote&quot;) Remote:Connect(function(stringA, stringB) print(stringA .. stringB) -- Prints &quot;Hello, someone!&quot; end)  "},{"title":"ClientBridge","type":0,"sectionRef":"#","url":"api/ClientBridge","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Fire","content":"&lt;/&gt; ClientBridge:Fire(...: any) → () The equivalent of :FireServer(). local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:Fire(&quot;Hello&quot;, &quot;world!&quot;)   "},{"title":"InvokeServerAsync​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#InvokeServerAsync","content":"&lt;/&gt; ClientBridge:InvokeServerAsync(...: any) → ...any Invokes the server for a response. Promise wrapper over :InvokeServerAsync() local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) local data = Bridge:InvokeServerAsync(&quot;whats 2+2?&quot;) print(data) -- prints &quot;4&quot;   "},{"title":"Connect​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Connect","content":"&lt;/&gt; ClientBridge:Connect(func: function) → nil Creates a connection. Can be disconnected using :Disconnect(). local Bridge = BridgeNet.CreateBridge(&quot;Remote&quot;) Bridge:Connect(function(text) print(text) end)   "},{"title":"Once​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Once","content":"&lt;/&gt; ClientBridge:Once(func: function) → nil Creates a connection, when fired it will disconnect. local Bridge = BridgeNet.CreateBridge(&quot;ConstantlyFiringText&quot;) Bridge:Connect(function(text) print(text) -- Fires multiple times end) Bridge:Once(function(text) print(text) -- Fires once end)   "},{"title":"SetReplicationRate​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#SetReplicationRate","content":"&lt;/&gt; ClientBridge:SetReplicationRate(replRate: number) → nil Sets the rate of which the Bridge sends and receives data.  "},{"title":"SetOutboundMiddleware​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#SetOutboundMiddleware","content":"&lt;/&gt; ClientBridge:SetOutboundMiddleware(middlewareTbl: {(...any) → nil}) → nil Sets the Bridge's outbound middleware functions. Any function which returns nil will drop the sequence completely. Overrides existing middleware. A more comprehensive guide on middleware will be coming soon. Object:SetOutboundMiddleware({ function(plr, ...) -- Called first return ... end, function(plr, ...) -- Called second print(&quot;1&quot;) return ... end, function(plr, ...) -- Called third print(&quot;2&quot;) return ... end, })   "},{"title":"SetInboundMiddleware​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#SetInboundMiddleware","content":"&lt;/&gt; ClientBridge:SetInboundMiddleware(middlewareTbl: {(...any) → nil}) → nil Sets the Bridge's inbound middleware functions. Any function which returns nil will drop the remote request completely. Overrides existing middleware. Allows you to change arguments or drop remote calls. A more comprehensive guide on middleware will be coming soon. Object:SetInboundMiddleware({ function(...) -- Called first return ... end, function(...) -- Called second print(&quot;1&quot;) return ... end, function(...) -- Called third print(&quot;2&quot;) return ... end, })   "},{"title":"SetNilAllowed​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#SetNilAllowed","content":"&lt;/&gt; ClientBridge:SetNilAllowed(allowed: boolean) → nil Allows nil parameters to be passed through without any weirdness. Does have a performance cost- this is off by default.  "},{"title":"Destroy​","type":1,"pageTitle":"ClientBridge","url":"api/ClientBridge#Destroy","content":"&lt;/&gt; ClientBridge:Destroy() → nil Destroys the ClientBridge object. Doesn't destroy the RemoteEvent, or destroy the identifier. It doesn't send anything to the server. Just destroys the client sided object. local Bridge = ClientBridge.new(&quot;Remote&quot;) ClientBridge:Destroy() ClientBridge:Fire() -- Errors  "}]